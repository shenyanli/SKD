//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SkdAdminClient.SkdWebService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SkdWebService.SkdServiceSoap")]
    public interface SkdServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCourseReleaseDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCourseReleaseDate();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetCourseReleaseDate", ReplyAction="*")]
        System.IAsyncResult BeginGetCourseReleaseDate(System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetCourseReleaseDate(System.IAsyncResult result);
        
        // CODEGEN: 参数“venderDetails”需要其他方案信息，使用参数模式无法捕获这些信息。特定特性为“System.Xml.Serialization.XmlArrayItemAttribute”。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExcuteSp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        SkdAdminClient.SkdWebService.ExcuteSpResponse ExcuteSp(SkdAdminClient.SkdWebService.ExcuteSpRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ExcuteSp", ReplyAction="*")]
        System.IAsyncResult BeginExcuteSp(SkdAdminClient.SkdWebService.ExcuteSpRequest request, System.AsyncCallback callback, object asyncState);
        
        SkdAdminClient.SkdWebService.ExcuteSpResponse EndExcuteSp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFeedBackInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        byte[][] GetFeedBackInfo(string courseName, string userAccount, string userName, string vender, string beginDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetFeedBackInfo", ReplyAction="*")]
        System.IAsyncResult BeginGetFeedBackInfo(string courseName, string userAccount, string userName, string vender, string beginDate, string endDate, System.AsyncCallback callback, object asyncState);
        
        byte[][] EndGetFeedBackInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FinishUpdateData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void FinishUpdateData();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/FinishUpdateData", ReplyAction="*")]
        System.IAsyncResult BeginFinishUpdateData(System.AsyncCallback callback, object asyncState);
        
        void EndFinishUpdateData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/NeedUpdateData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool NeedUpdateData();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/NeedUpdateData", ReplyAction="*")]
        System.IAsyncResult BeginNeedUpdateData(System.AsyncCallback callback, object asyncState);
        
        bool EndNeedUpdateData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Login(string userAccount, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Login", ReplyAction="*")]
        System.IAsyncResult BeginLogin(string userAccount, string pwd, System.AsyncCallback callback, object asyncState);
        
        bool EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPrivelegeInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPrivelegeInfo(string userAccount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetPrivelegeInfo", ReplyAction="*")]
        System.IAsyncResult BeginGetPrivelegeInfo(string userAccount, System.AsyncCallback callback, object asyncState);
        
        string EndGetPrivelegeInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLoginTotalTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetLoginTotalTable(string rbos, string venderIds, string userName, string userAccount, string loginDateBegin, string loginDateEnd);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetLoginTotalTable", ReplyAction="*")]
        System.IAsyncResult BeginGetLoginTotalTable(string rbos, string venderIds, string userName, string userAccount, string loginDateBegin, string loginDateEnd, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetLoginTotalTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLoginDetailTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetLoginDetailTable(string userVender, string userName, string userAccount, string loginDateBegin, string loginDateEnd);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetLoginDetailTable", ReplyAction="*")]
        System.IAsyncResult BeginGetLoginDetailTable(string userVender, string userName, string userAccount, string loginDateBegin, string loginDateEnd, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetLoginDetailTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProgressDetailTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ProgressDetailTable(string rbos, string venderIds, string userName, string userAccount, string bigcourseNames, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ProgressDetailTable", ReplyAction="*")]
        System.IAsyncResult BeginProgressDetailTable(string rbos, string venderIds, string userName, string userAccount, string bigcourseNames, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndProgressDetailTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetProgressDetailTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetProgressDetailTable(string rbos, string userVender, string userName, string userAccount, string courseName, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetProgressDetailTable", ReplyAction="*")]
        System.IAsyncResult BeginGetProgressDetailTable(string rbos, string userVender, string userName, string userAccount, string courseName, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetProgressDetailTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCourseStudyDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCourseStudyDetails(string userAccount, string userName, string courseName, string rbo, string venderId, string beginDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetCourseStudyDetails", ReplyAction="*")]
        System.IAsyncResult BeginGetCourseStudyDetails(string userAccount, string userName, string courseName, string rbo, string venderId, string beginDate, string endDate, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetCourseStudyDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVenders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetVenders(string userAccount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetVenders", ReplyAction="*")]
        System.IAsyncResult BeginGetVenders(string userAccount, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetVenders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOrgIdAndNameList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetOrgIdAndNameList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetOrgIdAndNameList", ReplyAction="*")]
        System.IAsyncResult BeginGetOrgIdAndNameList(System.AsyncCallback callback, object asyncState);
        
        string[] EndGetOrgIdAndNameList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOrgList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetOrgList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetOrgList", ReplyAction="*")]
        System.IAsyncResult BeginGetOrgList(System.AsyncCallback callback, object asyncState);
        
        string[] EndGetOrgList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRbos", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetRbos(string userAccount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetRbos", ReplyAction="*")]
        System.IAsyncResult BeginGetRbos(string userAccount, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRbos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCourseNameMap", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCourseNameMap();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetCourseNameMap", ReplyAction="*")]
        System.IAsyncResult BeginGetCourseNameMap(System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetCourseNameMap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PartVenderCoursePassRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable PartVenderCoursePassRate(string rbos, string venderIds, string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, int status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PartVenderCoursePassRate", ReplyAction="*")]
        System.IAsyncResult BeginPartVenderCoursePassRate(string rbos, string venderIds, string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, int status, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndPartVenderCoursePassRate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AllVenderCoursePassRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable AllVenderCoursePassRate(string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/AllVenderCoursePassRate", ReplyAction="*")]
        System.IAsyncResult BeginAllVenderCoursePassRate(string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndAllVenderCoursePassRate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCourseAddUp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCourseAddUp(string courseName, string rbo, string vender, string venderCode, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetCourseAddUp", ReplyAction="*")]
        System.IAsyncResult BeginGetCourseAddUp(string courseName, string rbo, string vender, string venderCode, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetCourseAddUp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCourseTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCourseTable(string courseName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetCourseTable", ReplyAction="*")]
        System.IAsyncResult BeginGetCourseTable(string courseName, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetCourseTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCourseName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetCourseName();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetCourseName", ReplyAction="*")]
        System.IAsyncResult BeginGetCourseName(System.AsyncCallback callback, object asyncState);
        
        string[] EndGetCourseName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMaxScoreTrainning", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetMaxScoreTrainning(string vender, string courseName, string recordName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetMaxScoreTrainning", ReplyAction="*")]
        System.IAsyncResult BeginGetMaxScoreTrainning(string vender, string courseName, string recordName, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetMaxScoreTrainning(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTrainningRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTrainningRecord(string[] sysIdList, string rbo, string venderName, string venderId, string userName, string userAccount, string courseName, string beginDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetTrainningRecord", ReplyAction="*")]
        System.IAsyncResult BeginGetTrainningRecord(string[] sysIdList, string rbo, string venderName, string venderId, string userName, string userAccount, string courseName, string beginDate, string endDate, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetTrainningRecord(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTrainningBaseInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTrainningBaseInfo(string courseName, string recordName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetTrainningBaseInfo", ReplyAction="*")]
        System.IAsyncResult BeginGetTrainningBaseInfo(string courseName, string recordName, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetTrainningBaseInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDistinctRecoordName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetDistinctRecoordName(string courseName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetDistinctRecoordName", ReplyAction="*")]
        System.IAsyncResult BeginGetDistinctRecoordName(string courseName, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetDistinctRecoordName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetTime();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetTime", ReplyAction="*")]
        System.IAsyncResult BeginGetTime(System.AsyncCallback callback, object asyncState);
        
        string EndGetTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTestCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTestCount(string courseName, string rbo, string vender, string userName, string userAccount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetTestCount", ReplyAction="*")]
        System.IAsyncResult BeginGetTestCount(string courseName, string rbo, string vender, string userName, string userAccount, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetTestCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertNewUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertNewUser(string userId, string userName, string userAccount, string vender, string userPwd, string status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/InsertNewUser", ReplyAction="*")]
        System.IAsyncResult BeginInsertNewUser(string userId, string userName, string userAccount, string vender, string userPwd, string status, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertNewUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateUserInfo(string userId, string userName, string userAccount, string vender, string userPwd, string userType, string status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UpdateUserInfo", ReplyAction="*")]
        System.IAsyncResult BeginUpdateUserInfo(string userId, string userName, string userAccount, string vender, string userPwd, string userType, string status, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateUserInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertNewOrg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertNewOrg(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/InsertNewOrg", ReplyAction="*")]
        System.IAsyncResult BeginInsertNewOrg(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertNewOrg(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateOrgInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateOrgInfo(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UpdateOrgInfo", ReplyAction="*")]
        System.IAsyncResult BeginUpdateOrgInfo(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateOrgInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertNewMap", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool InsertNewMap(string userId, string userAccount, string courseName, string vender);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/InsertNewMap", ReplyAction="*")]
        System.IAsyncResult BeginInsertNewMap(string userId, string userAccount, string courseName, string vender, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertNewMap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTestOrg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UpdateTestOrg(string[] venderCodes);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UpdateTestOrg", ReplyAction="*")]
        System.IAsyncResult BeginUpdateTestOrg(string[] venderCodes, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateTestOrg(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExcuteSp", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExcuteSpRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] venderDetails;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] userDetails;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] userCourseMaps;
        
        public ExcuteSpRequest() {
        }
        
        public ExcuteSpRequest(string[][] venderDetails, string[][] userDetails, string[][] userCourseMaps) {
            this.venderDetails = venderDetails;
            this.userDetails = userDetails;
            this.userCourseMaps = userCourseMaps;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExcuteSpResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ExcuteSpResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string ExcuteSpResult;
        
        public ExcuteSpResponse() {
        }
        
        public ExcuteSpResponse(string ExcuteSpResult) {
            this.ExcuteSpResult = ExcuteSpResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SkdServiceSoapChannel : SkdAdminClient.SkdWebService.SkdServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCourseReleaseDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCourseReleaseDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExcuteSpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExcuteSpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFeedBackInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFeedBackInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[][] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[][])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NeedUpdateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NeedUpdateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPrivelegeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPrivelegeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLoginTotalTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLoginTotalTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLoginDetailTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLoginDetailTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProgressDetailTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProgressDetailTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProgressDetailTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProgressDetailTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCourseStudyDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCourseStudyDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVendersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrgIdAndNameListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrgIdAndNameListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrgListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrgListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRbosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRbosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCourseNameMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCourseNameMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartVenderCoursePassRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PartVenderCoursePassRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AllVenderCoursePassRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AllVenderCoursePassRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCourseAddUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCourseAddUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCourseTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCourseTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCourseNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCourseNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxScoreTrainningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxScoreTrainningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrainningRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrainningRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrainningBaseInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrainningBaseInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDistinctRecoordNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDistinctRecoordNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertNewUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertNewUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertNewOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertNewOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateOrgInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateOrgInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertNewMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertNewMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTestOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateTestOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SkdServiceSoapClient : System.ServiceModel.ClientBase<SkdAdminClient.SkdWebService.SkdServiceSoap>, SkdAdminClient.SkdWebService.SkdServiceSoap {
        
        private BeginOperationDelegate onBeginGetCourseReleaseDateDelegate;
        
        private EndOperationDelegate onEndGetCourseReleaseDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetCourseReleaseDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginExcuteSpDelegate;
        
        private EndOperationDelegate onEndExcuteSpDelegate;
        
        private System.Threading.SendOrPostCallback onExcuteSpCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFeedBackInfoDelegate;
        
        private EndOperationDelegate onEndGetFeedBackInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetFeedBackInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginFinishUpdateDataDelegate;
        
        private EndOperationDelegate onEndFinishUpdateDataDelegate;
        
        private System.Threading.SendOrPostCallback onFinishUpdateDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginNeedUpdateDataDelegate;
        
        private EndOperationDelegate onEndNeedUpdateDataDelegate;
        
        private System.Threading.SendOrPostCallback onNeedUpdateDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPrivelegeInfoDelegate;
        
        private EndOperationDelegate onEndGetPrivelegeInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetPrivelegeInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLoginTotalTableDelegate;
        
        private EndOperationDelegate onEndGetLoginTotalTableDelegate;
        
        private System.Threading.SendOrPostCallback onGetLoginTotalTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLoginDetailTableDelegate;
        
        private EndOperationDelegate onEndGetLoginDetailTableDelegate;
        
        private System.Threading.SendOrPostCallback onGetLoginDetailTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginProgressDetailTableDelegate;
        
        private EndOperationDelegate onEndProgressDetailTableDelegate;
        
        private System.Threading.SendOrPostCallback onProgressDetailTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProgressDetailTableDelegate;
        
        private EndOperationDelegate onEndGetProgressDetailTableDelegate;
        
        private System.Threading.SendOrPostCallback onGetProgressDetailTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCourseStudyDetailsDelegate;
        
        private EndOperationDelegate onEndGetCourseStudyDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCourseStudyDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendersDelegate;
        
        private EndOperationDelegate onEndGetVendersDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrgIdAndNameListDelegate;
        
        private EndOperationDelegate onEndGetOrgIdAndNameListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrgIdAndNameListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrgListDelegate;
        
        private EndOperationDelegate onEndGetOrgListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrgListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRbosDelegate;
        
        private EndOperationDelegate onEndGetRbosDelegate;
        
        private System.Threading.SendOrPostCallback onGetRbosCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCourseNameMapDelegate;
        
        private EndOperationDelegate onEndGetCourseNameMapDelegate;
        
        private System.Threading.SendOrPostCallback onGetCourseNameMapCompletedDelegate;
        
        private BeginOperationDelegate onBeginPartVenderCoursePassRateDelegate;
        
        private EndOperationDelegate onEndPartVenderCoursePassRateDelegate;
        
        private System.Threading.SendOrPostCallback onPartVenderCoursePassRateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAllVenderCoursePassRateDelegate;
        
        private EndOperationDelegate onEndAllVenderCoursePassRateDelegate;
        
        private System.Threading.SendOrPostCallback onAllVenderCoursePassRateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCourseAddUpDelegate;
        
        private EndOperationDelegate onEndGetCourseAddUpDelegate;
        
        private System.Threading.SendOrPostCallback onGetCourseAddUpCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCourseTableDelegate;
        
        private EndOperationDelegate onEndGetCourseTableDelegate;
        
        private System.Threading.SendOrPostCallback onGetCourseTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCourseNameDelegate;
        
        private EndOperationDelegate onEndGetCourseNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetCourseNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxScoreTrainningDelegate;
        
        private EndOperationDelegate onEndGetMaxScoreTrainningDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxScoreTrainningCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrainningRecordDelegate;
        
        private EndOperationDelegate onEndGetTrainningRecordDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrainningRecordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrainningBaseInfoDelegate;
        
        private EndOperationDelegate onEndGetTrainningBaseInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrainningBaseInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDistinctRecoordNameDelegate;
        
        private EndOperationDelegate onEndGetDistinctRecoordNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetDistinctRecoordNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeDelegate;
        
        private EndOperationDelegate onEndGetTimeDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestCountDelegate;
        
        private EndOperationDelegate onEndGetTestCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertNewUserDelegate;
        
        private EndOperationDelegate onEndInsertNewUserDelegate;
        
        private System.Threading.SendOrPostCallback onInsertNewUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserInfoDelegate;
        
        private EndOperationDelegate onEndUpdateUserInfoDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertNewOrgDelegate;
        
        private EndOperationDelegate onEndInsertNewOrgDelegate;
        
        private System.Threading.SendOrPostCallback onInsertNewOrgCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateOrgInfoDelegate;
        
        private EndOperationDelegate onEndUpdateOrgInfoDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateOrgInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertNewMapDelegate;
        
        private EndOperationDelegate onEndInsertNewMapDelegate;
        
        private System.Threading.SendOrPostCallback onInsertNewMapCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTestOrgDelegate;
        
        private EndOperationDelegate onEndUpdateTestOrgDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTestOrgCompletedDelegate;
        
        public SkdServiceSoapClient() {
        }
        
        public SkdServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SkdServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SkdServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SkdServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetCourseReleaseDateCompletedEventArgs> GetCourseReleaseDateCompleted;
        
        public event System.EventHandler<ExcuteSpCompletedEventArgs> ExcuteSpCompleted;
        
        public event System.EventHandler<GetFeedBackInfoCompletedEventArgs> GetFeedBackInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> FinishUpdateDataCompleted;
        
        public event System.EventHandler<NeedUpdateDataCompletedEventArgs> NeedUpdateDataCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetPrivelegeInfoCompletedEventArgs> GetPrivelegeInfoCompleted;
        
        public event System.EventHandler<GetLoginTotalTableCompletedEventArgs> GetLoginTotalTableCompleted;
        
        public event System.EventHandler<GetLoginDetailTableCompletedEventArgs> GetLoginDetailTableCompleted;
        
        public event System.EventHandler<ProgressDetailTableCompletedEventArgs> ProgressDetailTableCompleted;
        
        public event System.EventHandler<GetProgressDetailTableCompletedEventArgs> GetProgressDetailTableCompleted;
        
        public event System.EventHandler<GetCourseStudyDetailsCompletedEventArgs> GetCourseStudyDetailsCompleted;
        
        public event System.EventHandler<GetVendersCompletedEventArgs> GetVendersCompleted;
        
        public event System.EventHandler<GetOrgIdAndNameListCompletedEventArgs> GetOrgIdAndNameListCompleted;
        
        public event System.EventHandler<GetOrgListCompletedEventArgs> GetOrgListCompleted;
        
        public event System.EventHandler<GetRbosCompletedEventArgs> GetRbosCompleted;
        
        public event System.EventHandler<GetCourseNameMapCompletedEventArgs> GetCourseNameMapCompleted;
        
        public event System.EventHandler<PartVenderCoursePassRateCompletedEventArgs> PartVenderCoursePassRateCompleted;
        
        public event System.EventHandler<AllVenderCoursePassRateCompletedEventArgs> AllVenderCoursePassRateCompleted;
        
        public event System.EventHandler<GetCourseAddUpCompletedEventArgs> GetCourseAddUpCompleted;
        
        public event System.EventHandler<GetCourseTableCompletedEventArgs> GetCourseTableCompleted;
        
        public event System.EventHandler<GetCourseNameCompletedEventArgs> GetCourseNameCompleted;
        
        public event System.EventHandler<GetMaxScoreTrainningCompletedEventArgs> GetMaxScoreTrainningCompleted;
        
        public event System.EventHandler<GetTrainningRecordCompletedEventArgs> GetTrainningRecordCompleted;
        
        public event System.EventHandler<GetTrainningBaseInfoCompletedEventArgs> GetTrainningBaseInfoCompleted;
        
        public event System.EventHandler<GetDistinctRecoordNameCompletedEventArgs> GetDistinctRecoordNameCompleted;
        
        public event System.EventHandler<GetTimeCompletedEventArgs> GetTimeCompleted;
        
        public event System.EventHandler<GetTestCountCompletedEventArgs> GetTestCountCompleted;
        
        public event System.EventHandler<InsertNewUserCompletedEventArgs> InsertNewUserCompleted;
        
        public event System.EventHandler<UpdateUserInfoCompletedEventArgs> UpdateUserInfoCompleted;
        
        public event System.EventHandler<InsertNewOrgCompletedEventArgs> InsertNewOrgCompleted;
        
        public event System.EventHandler<UpdateOrgInfoCompletedEventArgs> UpdateOrgInfoCompleted;
        
        public event System.EventHandler<InsertNewMapCompletedEventArgs> InsertNewMapCompleted;
        
        public event System.EventHandler<UpdateTestOrgCompletedEventArgs> UpdateTestOrgCompleted;
        
        public System.Data.DataTable GetCourseReleaseDate() {
            return base.Channel.GetCourseReleaseDate();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCourseReleaseDate(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCourseReleaseDate(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetCourseReleaseDate(System.IAsyncResult result) {
            return base.Channel.EndGetCourseReleaseDate(result);
        }
        
        private System.IAsyncResult OnBeginGetCourseReleaseDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCourseReleaseDate(callback, asyncState);
        }
        
        private object[] OnEndGetCourseReleaseDate(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetCourseReleaseDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCourseReleaseDateCompleted(object state) {
            if ((this.GetCourseReleaseDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCourseReleaseDateCompleted(this, new GetCourseReleaseDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCourseReleaseDateAsync() {
            this.GetCourseReleaseDateAsync(null);
        }
        
        public void GetCourseReleaseDateAsync(object userState) {
            if ((this.onBeginGetCourseReleaseDateDelegate == null)) {
                this.onBeginGetCourseReleaseDateDelegate = new BeginOperationDelegate(this.OnBeginGetCourseReleaseDate);
            }
            if ((this.onEndGetCourseReleaseDateDelegate == null)) {
                this.onEndGetCourseReleaseDateDelegate = new EndOperationDelegate(this.OnEndGetCourseReleaseDate);
            }
            if ((this.onGetCourseReleaseDateCompletedDelegate == null)) {
                this.onGetCourseReleaseDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCourseReleaseDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetCourseReleaseDateDelegate, null, this.onEndGetCourseReleaseDateDelegate, this.onGetCourseReleaseDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SkdAdminClient.SkdWebService.ExcuteSpResponse SkdAdminClient.SkdWebService.SkdServiceSoap.ExcuteSp(SkdAdminClient.SkdWebService.ExcuteSpRequest request) {
            return base.Channel.ExcuteSp(request);
        }
        
        public string ExcuteSp(string[][] venderDetails, string[][] userDetails, string[][] userCourseMaps) {
            SkdAdminClient.SkdWebService.ExcuteSpRequest inValue = new SkdAdminClient.SkdWebService.ExcuteSpRequest();
            inValue.venderDetails = venderDetails;
            inValue.userDetails = userDetails;
            inValue.userCourseMaps = userCourseMaps;
            SkdAdminClient.SkdWebService.ExcuteSpResponse retVal = ((SkdAdminClient.SkdWebService.SkdServiceSoap)(this)).ExcuteSp(inValue);
            return retVal.ExcuteSpResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SkdAdminClient.SkdWebService.SkdServiceSoap.BeginExcuteSp(SkdAdminClient.SkdWebService.ExcuteSpRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExcuteSp(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExcuteSp(string[][] venderDetails, string[][] userDetails, string[][] userCourseMaps, System.AsyncCallback callback, object asyncState) {
            SkdAdminClient.SkdWebService.ExcuteSpRequest inValue = new SkdAdminClient.SkdWebService.ExcuteSpRequest();
            inValue.venderDetails = venderDetails;
            inValue.userDetails = userDetails;
            inValue.userCourseMaps = userCourseMaps;
            return ((SkdAdminClient.SkdWebService.SkdServiceSoap)(this)).BeginExcuteSp(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SkdAdminClient.SkdWebService.ExcuteSpResponse SkdAdminClient.SkdWebService.SkdServiceSoap.EndExcuteSp(System.IAsyncResult result) {
            return base.Channel.EndExcuteSp(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndExcuteSp(System.IAsyncResult result) {
            SkdAdminClient.SkdWebService.ExcuteSpResponse retVal = ((SkdAdminClient.SkdWebService.SkdServiceSoap)(this)).EndExcuteSp(result);
            return retVal.ExcuteSpResult;
        }
        
        private System.IAsyncResult OnBeginExcuteSp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[][] venderDetails = ((string[][])(inValues[0]));
            string[][] userDetails = ((string[][])(inValues[1]));
            string[][] userCourseMaps = ((string[][])(inValues[2]));
            return this.BeginExcuteSp(venderDetails, userDetails, userCourseMaps, callback, asyncState);
        }
        
        private object[] OnEndExcuteSp(System.IAsyncResult result) {
            string retVal = this.EndExcuteSp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExcuteSpCompleted(object state) {
            if ((this.ExcuteSpCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExcuteSpCompleted(this, new ExcuteSpCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExcuteSpAsync(string[][] venderDetails, string[][] userDetails, string[][] userCourseMaps) {
            this.ExcuteSpAsync(venderDetails, userDetails, userCourseMaps, null);
        }
        
        public void ExcuteSpAsync(string[][] venderDetails, string[][] userDetails, string[][] userCourseMaps, object userState) {
            if ((this.onBeginExcuteSpDelegate == null)) {
                this.onBeginExcuteSpDelegate = new BeginOperationDelegate(this.OnBeginExcuteSp);
            }
            if ((this.onEndExcuteSpDelegate == null)) {
                this.onEndExcuteSpDelegate = new EndOperationDelegate(this.OnEndExcuteSp);
            }
            if ((this.onExcuteSpCompletedDelegate == null)) {
                this.onExcuteSpCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExcuteSpCompleted);
            }
            base.InvokeAsync(this.onBeginExcuteSpDelegate, new object[] {
                        venderDetails,
                        userDetails,
                        userCourseMaps}, this.onEndExcuteSpDelegate, this.onExcuteSpCompletedDelegate, userState);
        }
        
        public byte[][] GetFeedBackInfo(string courseName, string userAccount, string userName, string vender, string beginDate, string endDate) {
            return base.Channel.GetFeedBackInfo(courseName, userAccount, userName, vender, beginDate, endDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFeedBackInfo(string courseName, string userAccount, string userName, string vender, string beginDate, string endDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFeedBackInfo(courseName, userAccount, userName, vender, beginDate, endDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[][] EndGetFeedBackInfo(System.IAsyncResult result) {
            return base.Channel.EndGetFeedBackInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetFeedBackInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string courseName = ((string)(inValues[0]));
            string userAccount = ((string)(inValues[1]));
            string userName = ((string)(inValues[2]));
            string vender = ((string)(inValues[3]));
            string beginDate = ((string)(inValues[4]));
            string endDate = ((string)(inValues[5]));
            return this.BeginGetFeedBackInfo(courseName, userAccount, userName, vender, beginDate, endDate, callback, asyncState);
        }
        
        private object[] OnEndGetFeedBackInfo(System.IAsyncResult result) {
            byte[][] retVal = this.EndGetFeedBackInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFeedBackInfoCompleted(object state) {
            if ((this.GetFeedBackInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFeedBackInfoCompleted(this, new GetFeedBackInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFeedBackInfoAsync(string courseName, string userAccount, string userName, string vender, string beginDate, string endDate) {
            this.GetFeedBackInfoAsync(courseName, userAccount, userName, vender, beginDate, endDate, null);
        }
        
        public void GetFeedBackInfoAsync(string courseName, string userAccount, string userName, string vender, string beginDate, string endDate, object userState) {
            if ((this.onBeginGetFeedBackInfoDelegate == null)) {
                this.onBeginGetFeedBackInfoDelegate = new BeginOperationDelegate(this.OnBeginGetFeedBackInfo);
            }
            if ((this.onEndGetFeedBackInfoDelegate == null)) {
                this.onEndGetFeedBackInfoDelegate = new EndOperationDelegate(this.OnEndGetFeedBackInfo);
            }
            if ((this.onGetFeedBackInfoCompletedDelegate == null)) {
                this.onGetFeedBackInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFeedBackInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetFeedBackInfoDelegate, new object[] {
                        courseName,
                        userAccount,
                        userName,
                        vender,
                        beginDate,
                        endDate}, this.onEndGetFeedBackInfoDelegate, this.onGetFeedBackInfoCompletedDelegate, userState);
        }
        
        public void FinishUpdateData() {
            base.Channel.FinishUpdateData();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFinishUpdateData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFinishUpdateData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndFinishUpdateData(System.IAsyncResult result) {
            base.Channel.EndFinishUpdateData(result);
        }
        
        private System.IAsyncResult OnBeginFinishUpdateData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginFinishUpdateData(callback, asyncState);
        }
        
        private object[] OnEndFinishUpdateData(System.IAsyncResult result) {
            this.EndFinishUpdateData(result);
            return null;
        }
        
        private void OnFinishUpdateDataCompleted(object state) {
            if ((this.FinishUpdateDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FinishUpdateDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FinishUpdateDataAsync() {
            this.FinishUpdateDataAsync(null);
        }
        
        public void FinishUpdateDataAsync(object userState) {
            if ((this.onBeginFinishUpdateDataDelegate == null)) {
                this.onBeginFinishUpdateDataDelegate = new BeginOperationDelegate(this.OnBeginFinishUpdateData);
            }
            if ((this.onEndFinishUpdateDataDelegate == null)) {
                this.onEndFinishUpdateDataDelegate = new EndOperationDelegate(this.OnEndFinishUpdateData);
            }
            if ((this.onFinishUpdateDataCompletedDelegate == null)) {
                this.onFinishUpdateDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFinishUpdateDataCompleted);
            }
            base.InvokeAsync(this.onBeginFinishUpdateDataDelegate, null, this.onEndFinishUpdateDataDelegate, this.onFinishUpdateDataCompletedDelegate, userState);
        }
        
        public bool NeedUpdateData() {
            return base.Channel.NeedUpdateData();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginNeedUpdateData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNeedUpdateData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndNeedUpdateData(System.IAsyncResult result) {
            return base.Channel.EndNeedUpdateData(result);
        }
        
        private System.IAsyncResult OnBeginNeedUpdateData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginNeedUpdateData(callback, asyncState);
        }
        
        private object[] OnEndNeedUpdateData(System.IAsyncResult result) {
            bool retVal = this.EndNeedUpdateData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNeedUpdateDataCompleted(object state) {
            if ((this.NeedUpdateDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NeedUpdateDataCompleted(this, new NeedUpdateDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NeedUpdateDataAsync() {
            this.NeedUpdateDataAsync(null);
        }
        
        public void NeedUpdateDataAsync(object userState) {
            if ((this.onBeginNeedUpdateDataDelegate == null)) {
                this.onBeginNeedUpdateDataDelegate = new BeginOperationDelegate(this.OnBeginNeedUpdateData);
            }
            if ((this.onEndNeedUpdateDataDelegate == null)) {
                this.onEndNeedUpdateDataDelegate = new EndOperationDelegate(this.OnEndNeedUpdateData);
            }
            if ((this.onNeedUpdateDataCompletedDelegate == null)) {
                this.onNeedUpdateDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNeedUpdateDataCompleted);
            }
            base.InvokeAsync(this.onBeginNeedUpdateDataDelegate, null, this.onEndNeedUpdateDataDelegate, this.onNeedUpdateDataCompletedDelegate, userState);
        }
        
        public bool Login(string userAccount, string pwd) {
            return base.Channel.Login(userAccount, pwd);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string userAccount, string pwd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(userAccount, pwd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userAccount = ((string)(inValues[0]));
            string pwd = ((string)(inValues[1]));
            return this.BeginLogin(userAccount, pwd, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            bool retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string userAccount, string pwd) {
            this.LoginAsync(userAccount, pwd, null);
        }
        
        public void LoginAsync(string userAccount, string pwd, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        userAccount,
                        pwd}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public string GetPrivelegeInfo(string userAccount) {
            return base.Channel.GetPrivelegeInfo(userAccount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPrivelegeInfo(string userAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPrivelegeInfo(userAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetPrivelegeInfo(System.IAsyncResult result) {
            return base.Channel.EndGetPrivelegeInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetPrivelegeInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userAccount = ((string)(inValues[0]));
            return this.BeginGetPrivelegeInfo(userAccount, callback, asyncState);
        }
        
        private object[] OnEndGetPrivelegeInfo(System.IAsyncResult result) {
            string retVal = this.EndGetPrivelegeInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPrivelegeInfoCompleted(object state) {
            if ((this.GetPrivelegeInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPrivelegeInfoCompleted(this, new GetPrivelegeInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPrivelegeInfoAsync(string userAccount) {
            this.GetPrivelegeInfoAsync(userAccount, null);
        }
        
        public void GetPrivelegeInfoAsync(string userAccount, object userState) {
            if ((this.onBeginGetPrivelegeInfoDelegate == null)) {
                this.onBeginGetPrivelegeInfoDelegate = new BeginOperationDelegate(this.OnBeginGetPrivelegeInfo);
            }
            if ((this.onEndGetPrivelegeInfoDelegate == null)) {
                this.onEndGetPrivelegeInfoDelegate = new EndOperationDelegate(this.OnEndGetPrivelegeInfo);
            }
            if ((this.onGetPrivelegeInfoCompletedDelegate == null)) {
                this.onGetPrivelegeInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPrivelegeInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetPrivelegeInfoDelegate, new object[] {
                        userAccount}, this.onEndGetPrivelegeInfoDelegate, this.onGetPrivelegeInfoCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetLoginTotalTable(string rbos, string venderIds, string userName, string userAccount, string loginDateBegin, string loginDateEnd) {
            return base.Channel.GetLoginTotalTable(rbos, venderIds, userName, userAccount, loginDateBegin, loginDateEnd);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLoginTotalTable(string rbos, string venderIds, string userName, string userAccount, string loginDateBegin, string loginDateEnd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLoginTotalTable(rbos, venderIds, userName, userAccount, loginDateBegin, loginDateEnd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetLoginTotalTable(System.IAsyncResult result) {
            return base.Channel.EndGetLoginTotalTable(result);
        }
        
        private System.IAsyncResult OnBeginGetLoginTotalTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rbos = ((string)(inValues[0]));
            string venderIds = ((string)(inValues[1]));
            string userName = ((string)(inValues[2]));
            string userAccount = ((string)(inValues[3]));
            string loginDateBegin = ((string)(inValues[4]));
            string loginDateEnd = ((string)(inValues[5]));
            return this.BeginGetLoginTotalTable(rbos, venderIds, userName, userAccount, loginDateBegin, loginDateEnd, callback, asyncState);
        }
        
        private object[] OnEndGetLoginTotalTable(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetLoginTotalTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLoginTotalTableCompleted(object state) {
            if ((this.GetLoginTotalTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLoginTotalTableCompleted(this, new GetLoginTotalTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLoginTotalTableAsync(string rbos, string venderIds, string userName, string userAccount, string loginDateBegin, string loginDateEnd) {
            this.GetLoginTotalTableAsync(rbos, venderIds, userName, userAccount, loginDateBegin, loginDateEnd, null);
        }
        
        public void GetLoginTotalTableAsync(string rbos, string venderIds, string userName, string userAccount, string loginDateBegin, string loginDateEnd, object userState) {
            if ((this.onBeginGetLoginTotalTableDelegate == null)) {
                this.onBeginGetLoginTotalTableDelegate = new BeginOperationDelegate(this.OnBeginGetLoginTotalTable);
            }
            if ((this.onEndGetLoginTotalTableDelegate == null)) {
                this.onEndGetLoginTotalTableDelegate = new EndOperationDelegate(this.OnEndGetLoginTotalTable);
            }
            if ((this.onGetLoginTotalTableCompletedDelegate == null)) {
                this.onGetLoginTotalTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLoginTotalTableCompleted);
            }
            base.InvokeAsync(this.onBeginGetLoginTotalTableDelegate, new object[] {
                        rbos,
                        venderIds,
                        userName,
                        userAccount,
                        loginDateBegin,
                        loginDateEnd}, this.onEndGetLoginTotalTableDelegate, this.onGetLoginTotalTableCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetLoginDetailTable(string userVender, string userName, string userAccount, string loginDateBegin, string loginDateEnd) {
            return base.Channel.GetLoginDetailTable(userVender, userName, userAccount, loginDateBegin, loginDateEnd);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLoginDetailTable(string userVender, string userName, string userAccount, string loginDateBegin, string loginDateEnd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLoginDetailTable(userVender, userName, userAccount, loginDateBegin, loginDateEnd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetLoginDetailTable(System.IAsyncResult result) {
            return base.Channel.EndGetLoginDetailTable(result);
        }
        
        private System.IAsyncResult OnBeginGetLoginDetailTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userVender = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            string userAccount = ((string)(inValues[2]));
            string loginDateBegin = ((string)(inValues[3]));
            string loginDateEnd = ((string)(inValues[4]));
            return this.BeginGetLoginDetailTable(userVender, userName, userAccount, loginDateBegin, loginDateEnd, callback, asyncState);
        }
        
        private object[] OnEndGetLoginDetailTable(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetLoginDetailTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLoginDetailTableCompleted(object state) {
            if ((this.GetLoginDetailTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLoginDetailTableCompleted(this, new GetLoginDetailTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLoginDetailTableAsync(string userVender, string userName, string userAccount, string loginDateBegin, string loginDateEnd) {
            this.GetLoginDetailTableAsync(userVender, userName, userAccount, loginDateBegin, loginDateEnd, null);
        }
        
        public void GetLoginDetailTableAsync(string userVender, string userName, string userAccount, string loginDateBegin, string loginDateEnd, object userState) {
            if ((this.onBeginGetLoginDetailTableDelegate == null)) {
                this.onBeginGetLoginDetailTableDelegate = new BeginOperationDelegate(this.OnBeginGetLoginDetailTable);
            }
            if ((this.onEndGetLoginDetailTableDelegate == null)) {
                this.onEndGetLoginDetailTableDelegate = new EndOperationDelegate(this.OnEndGetLoginDetailTable);
            }
            if ((this.onGetLoginDetailTableCompletedDelegate == null)) {
                this.onGetLoginDetailTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLoginDetailTableCompleted);
            }
            base.InvokeAsync(this.onBeginGetLoginDetailTableDelegate, new object[] {
                        userVender,
                        userName,
                        userAccount,
                        loginDateBegin,
                        loginDateEnd}, this.onEndGetLoginDetailTableDelegate, this.onGetLoginDetailTableCompletedDelegate, userState);
        }
        
        public System.Data.DataTable ProgressDetailTable(string rbos, string venderIds, string userName, string userAccount, string bigcourseNames, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status) {
            return base.Channel.ProgressDetailTable(rbos, venderIds, userName, userAccount, bigcourseNames, dateBegin, dateEnd, finishBegin, finishEnd, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProgressDetailTable(string rbos, string venderIds, string userName, string userAccount, string bigcourseNames, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProgressDetailTable(rbos, venderIds, userName, userAccount, bigcourseNames, dateBegin, dateEnd, finishBegin, finishEnd, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndProgressDetailTable(System.IAsyncResult result) {
            return base.Channel.EndProgressDetailTable(result);
        }
        
        private System.IAsyncResult OnBeginProgressDetailTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rbos = ((string)(inValues[0]));
            string venderIds = ((string)(inValues[1]));
            string userName = ((string)(inValues[2]));
            string userAccount = ((string)(inValues[3]));
            string bigcourseNames = ((string)(inValues[4]));
            string dateBegin = ((string)(inValues[5]));
            string dateEnd = ((string)(inValues[6]));
            string finishBegin = ((string)(inValues[7]));
            string finishEnd = ((string)(inValues[8]));
            int status = ((int)(inValues[9]));
            return this.BeginProgressDetailTable(rbos, venderIds, userName, userAccount, bigcourseNames, dateBegin, dateEnd, finishBegin, finishEnd, status, callback, asyncState);
        }
        
        private object[] OnEndProgressDetailTable(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndProgressDetailTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProgressDetailTableCompleted(object state) {
            if ((this.ProgressDetailTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProgressDetailTableCompleted(this, new ProgressDetailTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProgressDetailTableAsync(string rbos, string venderIds, string userName, string userAccount, string bigcourseNames, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status) {
            this.ProgressDetailTableAsync(rbos, venderIds, userName, userAccount, bigcourseNames, dateBegin, dateEnd, finishBegin, finishEnd, status, null);
        }
        
        public void ProgressDetailTableAsync(string rbos, string venderIds, string userName, string userAccount, string bigcourseNames, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status, object userState) {
            if ((this.onBeginProgressDetailTableDelegate == null)) {
                this.onBeginProgressDetailTableDelegate = new BeginOperationDelegate(this.OnBeginProgressDetailTable);
            }
            if ((this.onEndProgressDetailTableDelegate == null)) {
                this.onEndProgressDetailTableDelegate = new EndOperationDelegate(this.OnEndProgressDetailTable);
            }
            if ((this.onProgressDetailTableCompletedDelegate == null)) {
                this.onProgressDetailTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProgressDetailTableCompleted);
            }
            base.InvokeAsync(this.onBeginProgressDetailTableDelegate, new object[] {
                        rbos,
                        venderIds,
                        userName,
                        userAccount,
                        bigcourseNames,
                        dateBegin,
                        dateEnd,
                        finishBegin,
                        finishEnd,
                        status}, this.onEndProgressDetailTableDelegate, this.onProgressDetailTableCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetProgressDetailTable(string rbos, string userVender, string userName, string userAccount, string courseName, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status) {
            return base.Channel.GetProgressDetailTable(rbos, userVender, userName, userAccount, courseName, dateBegin, dateEnd, finishBegin, finishEnd, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProgressDetailTable(string rbos, string userVender, string userName, string userAccount, string courseName, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProgressDetailTable(rbos, userVender, userName, userAccount, courseName, dateBegin, dateEnd, finishBegin, finishEnd, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetProgressDetailTable(System.IAsyncResult result) {
            return base.Channel.EndGetProgressDetailTable(result);
        }
        
        private System.IAsyncResult OnBeginGetProgressDetailTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rbos = ((string)(inValues[0]));
            string userVender = ((string)(inValues[1]));
            string userName = ((string)(inValues[2]));
            string userAccount = ((string)(inValues[3]));
            string courseName = ((string)(inValues[4]));
            string dateBegin = ((string)(inValues[5]));
            string dateEnd = ((string)(inValues[6]));
            string finishBegin = ((string)(inValues[7]));
            string finishEnd = ((string)(inValues[8]));
            int status = ((int)(inValues[9]));
            return this.BeginGetProgressDetailTable(rbos, userVender, userName, userAccount, courseName, dateBegin, dateEnd, finishBegin, finishEnd, status, callback, asyncState);
        }
        
        private object[] OnEndGetProgressDetailTable(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetProgressDetailTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProgressDetailTableCompleted(object state) {
            if ((this.GetProgressDetailTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProgressDetailTableCompleted(this, new GetProgressDetailTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProgressDetailTableAsync(string rbos, string userVender, string userName, string userAccount, string courseName, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status) {
            this.GetProgressDetailTableAsync(rbos, userVender, userName, userAccount, courseName, dateBegin, dateEnd, finishBegin, finishEnd, status, null);
        }
        
        public void GetProgressDetailTableAsync(string rbos, string userVender, string userName, string userAccount, string courseName, string dateBegin, string dateEnd, string finishBegin, string finishEnd, int status, object userState) {
            if ((this.onBeginGetProgressDetailTableDelegate == null)) {
                this.onBeginGetProgressDetailTableDelegate = new BeginOperationDelegate(this.OnBeginGetProgressDetailTable);
            }
            if ((this.onEndGetProgressDetailTableDelegate == null)) {
                this.onEndGetProgressDetailTableDelegate = new EndOperationDelegate(this.OnEndGetProgressDetailTable);
            }
            if ((this.onGetProgressDetailTableCompletedDelegate == null)) {
                this.onGetProgressDetailTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProgressDetailTableCompleted);
            }
            base.InvokeAsync(this.onBeginGetProgressDetailTableDelegate, new object[] {
                        rbos,
                        userVender,
                        userName,
                        userAccount,
                        courseName,
                        dateBegin,
                        dateEnd,
                        finishBegin,
                        finishEnd,
                        status}, this.onEndGetProgressDetailTableDelegate, this.onGetProgressDetailTableCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetCourseStudyDetails(string userAccount, string userName, string courseName, string rbo, string venderId, string beginDate, string endDate) {
            return base.Channel.GetCourseStudyDetails(userAccount, userName, courseName, rbo, venderId, beginDate, endDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCourseStudyDetails(string userAccount, string userName, string courseName, string rbo, string venderId, string beginDate, string endDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCourseStudyDetails(userAccount, userName, courseName, rbo, venderId, beginDate, endDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetCourseStudyDetails(System.IAsyncResult result) {
            return base.Channel.EndGetCourseStudyDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetCourseStudyDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userAccount = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            string courseName = ((string)(inValues[2]));
            string rbo = ((string)(inValues[3]));
            string venderId = ((string)(inValues[4]));
            string beginDate = ((string)(inValues[5]));
            string endDate = ((string)(inValues[6]));
            return this.BeginGetCourseStudyDetails(userAccount, userName, courseName, rbo, venderId, beginDate, endDate, callback, asyncState);
        }
        
        private object[] OnEndGetCourseStudyDetails(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetCourseStudyDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCourseStudyDetailsCompleted(object state) {
            if ((this.GetCourseStudyDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCourseStudyDetailsCompleted(this, new GetCourseStudyDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCourseStudyDetailsAsync(string userAccount, string userName, string courseName, string rbo, string venderId, string beginDate, string endDate) {
            this.GetCourseStudyDetailsAsync(userAccount, userName, courseName, rbo, venderId, beginDate, endDate, null);
        }
        
        public void GetCourseStudyDetailsAsync(string userAccount, string userName, string courseName, string rbo, string venderId, string beginDate, string endDate, object userState) {
            if ((this.onBeginGetCourseStudyDetailsDelegate == null)) {
                this.onBeginGetCourseStudyDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetCourseStudyDetails);
            }
            if ((this.onEndGetCourseStudyDetailsDelegate == null)) {
                this.onEndGetCourseStudyDetailsDelegate = new EndOperationDelegate(this.OnEndGetCourseStudyDetails);
            }
            if ((this.onGetCourseStudyDetailsCompletedDelegate == null)) {
                this.onGetCourseStudyDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCourseStudyDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCourseStudyDetailsDelegate, new object[] {
                        userAccount,
                        userName,
                        courseName,
                        rbo,
                        venderId,
                        beginDate,
                        endDate}, this.onEndGetCourseStudyDetailsDelegate, this.onGetCourseStudyDetailsCompletedDelegate, userState);
        }
        
        public string[] GetVenders(string userAccount) {
            return base.Channel.GetVenders(userAccount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetVenders(string userAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVenders(userAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetVenders(System.IAsyncResult result) {
            return base.Channel.EndGetVenders(result);
        }
        
        private System.IAsyncResult OnBeginGetVenders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userAccount = ((string)(inValues[0]));
            return this.BeginGetVenders(userAccount, callback, asyncState);
        }
        
        private object[] OnEndGetVenders(System.IAsyncResult result) {
            string[] retVal = this.EndGetVenders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendersCompleted(object state) {
            if ((this.GetVendersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendersCompleted(this, new GetVendersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendersAsync(string userAccount) {
            this.GetVendersAsync(userAccount, null);
        }
        
        public void GetVendersAsync(string userAccount, object userState) {
            if ((this.onBeginGetVendersDelegate == null)) {
                this.onBeginGetVendersDelegate = new BeginOperationDelegate(this.OnBeginGetVenders);
            }
            if ((this.onEndGetVendersDelegate == null)) {
                this.onEndGetVendersDelegate = new EndOperationDelegate(this.OnEndGetVenders);
            }
            if ((this.onGetVendersCompletedDelegate == null)) {
                this.onGetVendersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendersCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendersDelegate, new object[] {
                        userAccount}, this.onEndGetVendersDelegate, this.onGetVendersCompletedDelegate, userState);
        }
        
        public string[] GetOrgIdAndNameList() {
            return base.Channel.GetOrgIdAndNameList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrgIdAndNameList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrgIdAndNameList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetOrgIdAndNameList(System.IAsyncResult result) {
            return base.Channel.EndGetOrgIdAndNameList(result);
        }
        
        private System.IAsyncResult OnBeginGetOrgIdAndNameList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetOrgIdAndNameList(callback, asyncState);
        }
        
        private object[] OnEndGetOrgIdAndNameList(System.IAsyncResult result) {
            string[] retVal = this.EndGetOrgIdAndNameList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrgIdAndNameListCompleted(object state) {
            if ((this.GetOrgIdAndNameListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrgIdAndNameListCompleted(this, new GetOrgIdAndNameListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrgIdAndNameListAsync() {
            this.GetOrgIdAndNameListAsync(null);
        }
        
        public void GetOrgIdAndNameListAsync(object userState) {
            if ((this.onBeginGetOrgIdAndNameListDelegate == null)) {
                this.onBeginGetOrgIdAndNameListDelegate = new BeginOperationDelegate(this.OnBeginGetOrgIdAndNameList);
            }
            if ((this.onEndGetOrgIdAndNameListDelegate == null)) {
                this.onEndGetOrgIdAndNameListDelegate = new EndOperationDelegate(this.OnEndGetOrgIdAndNameList);
            }
            if ((this.onGetOrgIdAndNameListCompletedDelegate == null)) {
                this.onGetOrgIdAndNameListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrgIdAndNameListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrgIdAndNameListDelegate, null, this.onEndGetOrgIdAndNameListDelegate, this.onGetOrgIdAndNameListCompletedDelegate, userState);
        }
        
        public string[] GetOrgList() {
            return base.Channel.GetOrgList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrgList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrgList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetOrgList(System.IAsyncResult result) {
            return base.Channel.EndGetOrgList(result);
        }
        
        private System.IAsyncResult OnBeginGetOrgList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetOrgList(callback, asyncState);
        }
        
        private object[] OnEndGetOrgList(System.IAsyncResult result) {
            string[] retVal = this.EndGetOrgList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrgListCompleted(object state) {
            if ((this.GetOrgListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrgListCompleted(this, new GetOrgListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrgListAsync() {
            this.GetOrgListAsync(null);
        }
        
        public void GetOrgListAsync(object userState) {
            if ((this.onBeginGetOrgListDelegate == null)) {
                this.onBeginGetOrgListDelegate = new BeginOperationDelegate(this.OnBeginGetOrgList);
            }
            if ((this.onEndGetOrgListDelegate == null)) {
                this.onEndGetOrgListDelegate = new EndOperationDelegate(this.OnEndGetOrgList);
            }
            if ((this.onGetOrgListCompletedDelegate == null)) {
                this.onGetOrgListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrgListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrgListDelegate, null, this.onEndGetOrgListDelegate, this.onGetOrgListCompletedDelegate, userState);
        }
        
        public string[] GetRbos(string userAccount) {
            return base.Channel.GetRbos(userAccount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRbos(string userAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRbos(userAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetRbos(System.IAsyncResult result) {
            return base.Channel.EndGetRbos(result);
        }
        
        private System.IAsyncResult OnBeginGetRbos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userAccount = ((string)(inValues[0]));
            return this.BeginGetRbos(userAccount, callback, asyncState);
        }
        
        private object[] OnEndGetRbos(System.IAsyncResult result) {
            string[] retVal = this.EndGetRbos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRbosCompleted(object state) {
            if ((this.GetRbosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRbosCompleted(this, new GetRbosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRbosAsync(string userAccount) {
            this.GetRbosAsync(userAccount, null);
        }
        
        public void GetRbosAsync(string userAccount, object userState) {
            if ((this.onBeginGetRbosDelegate == null)) {
                this.onBeginGetRbosDelegate = new BeginOperationDelegate(this.OnBeginGetRbos);
            }
            if ((this.onEndGetRbosDelegate == null)) {
                this.onEndGetRbosDelegate = new EndOperationDelegate(this.OnEndGetRbos);
            }
            if ((this.onGetRbosCompletedDelegate == null)) {
                this.onGetRbosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRbosCompleted);
            }
            base.InvokeAsync(this.onBeginGetRbosDelegate, new object[] {
                        userAccount}, this.onEndGetRbosDelegate, this.onGetRbosCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetCourseNameMap() {
            return base.Channel.GetCourseNameMap();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCourseNameMap(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCourseNameMap(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetCourseNameMap(System.IAsyncResult result) {
            return base.Channel.EndGetCourseNameMap(result);
        }
        
        private System.IAsyncResult OnBeginGetCourseNameMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCourseNameMap(callback, asyncState);
        }
        
        private object[] OnEndGetCourseNameMap(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetCourseNameMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCourseNameMapCompleted(object state) {
            if ((this.GetCourseNameMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCourseNameMapCompleted(this, new GetCourseNameMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCourseNameMapAsync() {
            this.GetCourseNameMapAsync(null);
        }
        
        public void GetCourseNameMapAsync(object userState) {
            if ((this.onBeginGetCourseNameMapDelegate == null)) {
                this.onBeginGetCourseNameMapDelegate = new BeginOperationDelegate(this.OnBeginGetCourseNameMap);
            }
            if ((this.onEndGetCourseNameMapDelegate == null)) {
                this.onEndGetCourseNameMapDelegate = new EndOperationDelegate(this.OnEndGetCourseNameMap);
            }
            if ((this.onGetCourseNameMapCompletedDelegate == null)) {
                this.onGetCourseNameMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCourseNameMapCompleted);
            }
            base.InvokeAsync(this.onBeginGetCourseNameMapDelegate, null, this.onEndGetCourseNameMapDelegate, this.onGetCourseNameMapCompletedDelegate, userState);
        }
        
        public System.Data.DataTable PartVenderCoursePassRate(string rbos, string venderIds, string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, int status) {
            return base.Channel.PartVenderCoursePassRate(rbos, venderIds, courseNames, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPartVenderCoursePassRate(string rbos, string venderIds, string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, int status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPartVenderCoursePassRate(rbos, venderIds, courseNames, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndPartVenderCoursePassRate(System.IAsyncResult result) {
            return base.Channel.EndPartVenderCoursePassRate(result);
        }
        
        private System.IAsyncResult OnBeginPartVenderCoursePassRate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rbos = ((string)(inValues[0]));
            string venderIds = ((string)(inValues[1]));
            string courseNames = ((string)(inValues[2]));
            string finishBeginDate = ((string)(inValues[3]));
            string finishEndDate = ((string)(inValues[4]));
            string studyBeginDate = ((string)(inValues[5]));
            string studyEndDate = ((string)(inValues[6]));
            int status = ((int)(inValues[7]));
            return this.BeginPartVenderCoursePassRate(rbos, venderIds, courseNames, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, status, callback, asyncState);
        }
        
        private object[] OnEndPartVenderCoursePassRate(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndPartVenderCoursePassRate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPartVenderCoursePassRateCompleted(object state) {
            if ((this.PartVenderCoursePassRateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PartVenderCoursePassRateCompleted(this, new PartVenderCoursePassRateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PartVenderCoursePassRateAsync(string rbos, string venderIds, string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, int status) {
            this.PartVenderCoursePassRateAsync(rbos, venderIds, courseNames, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, status, null);
        }
        
        public void PartVenderCoursePassRateAsync(string rbos, string venderIds, string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, int status, object userState) {
            if ((this.onBeginPartVenderCoursePassRateDelegate == null)) {
                this.onBeginPartVenderCoursePassRateDelegate = new BeginOperationDelegate(this.OnBeginPartVenderCoursePassRate);
            }
            if ((this.onEndPartVenderCoursePassRateDelegate == null)) {
                this.onEndPartVenderCoursePassRateDelegate = new EndOperationDelegate(this.OnEndPartVenderCoursePassRate);
            }
            if ((this.onPartVenderCoursePassRateCompletedDelegate == null)) {
                this.onPartVenderCoursePassRateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPartVenderCoursePassRateCompleted);
            }
            base.InvokeAsync(this.onBeginPartVenderCoursePassRateDelegate, new object[] {
                        rbos,
                        venderIds,
                        courseNames,
                        finishBeginDate,
                        finishEndDate,
                        studyBeginDate,
                        studyEndDate,
                        status}, this.onEndPartVenderCoursePassRateDelegate, this.onPartVenderCoursePassRateCompletedDelegate, userState);
        }
        
        public System.Data.DataTable AllVenderCoursePassRate(string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate) {
            return base.Channel.AllVenderCoursePassRate(courseNames, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAllVenderCoursePassRate(string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAllVenderCoursePassRate(courseNames, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndAllVenderCoursePassRate(System.IAsyncResult result) {
            return base.Channel.EndAllVenderCoursePassRate(result);
        }
        
        private System.IAsyncResult OnBeginAllVenderCoursePassRate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string courseNames = ((string)(inValues[0]));
            string finishBeginDate = ((string)(inValues[1]));
            string finishEndDate = ((string)(inValues[2]));
            string studyBeginDate = ((string)(inValues[3]));
            string studyEndDate = ((string)(inValues[4]));
            return this.BeginAllVenderCoursePassRate(courseNames, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, callback, asyncState);
        }
        
        private object[] OnEndAllVenderCoursePassRate(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndAllVenderCoursePassRate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAllVenderCoursePassRateCompleted(object state) {
            if ((this.AllVenderCoursePassRateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AllVenderCoursePassRateCompleted(this, new AllVenderCoursePassRateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AllVenderCoursePassRateAsync(string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate) {
            this.AllVenderCoursePassRateAsync(courseNames, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, null);
        }
        
        public void AllVenderCoursePassRateAsync(string courseNames, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, object userState) {
            if ((this.onBeginAllVenderCoursePassRateDelegate == null)) {
                this.onBeginAllVenderCoursePassRateDelegate = new BeginOperationDelegate(this.OnBeginAllVenderCoursePassRate);
            }
            if ((this.onEndAllVenderCoursePassRateDelegate == null)) {
                this.onEndAllVenderCoursePassRateDelegate = new EndOperationDelegate(this.OnEndAllVenderCoursePassRate);
            }
            if ((this.onAllVenderCoursePassRateCompletedDelegate == null)) {
                this.onAllVenderCoursePassRateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAllVenderCoursePassRateCompleted);
            }
            base.InvokeAsync(this.onBeginAllVenderCoursePassRateDelegate, new object[] {
                        courseNames,
                        finishBeginDate,
                        finishEndDate,
                        studyBeginDate,
                        studyEndDate}, this.onEndAllVenderCoursePassRateDelegate, this.onAllVenderCoursePassRateCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetCourseAddUp(string courseName, string rbo, string vender, string venderCode, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate) {
            return base.Channel.GetCourseAddUp(courseName, rbo, vender, venderCode, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCourseAddUp(string courseName, string rbo, string vender, string venderCode, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCourseAddUp(courseName, rbo, vender, venderCode, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetCourseAddUp(System.IAsyncResult result) {
            return base.Channel.EndGetCourseAddUp(result);
        }
        
        private System.IAsyncResult OnBeginGetCourseAddUp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string courseName = ((string)(inValues[0]));
            string rbo = ((string)(inValues[1]));
            string vender = ((string)(inValues[2]));
            string venderCode = ((string)(inValues[3]));
            string finishBeginDate = ((string)(inValues[4]));
            string finishEndDate = ((string)(inValues[5]));
            string studyBeginDate = ((string)(inValues[6]));
            string studyEndDate = ((string)(inValues[7]));
            return this.BeginGetCourseAddUp(courseName, rbo, vender, venderCode, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, callback, asyncState);
        }
        
        private object[] OnEndGetCourseAddUp(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetCourseAddUp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCourseAddUpCompleted(object state) {
            if ((this.GetCourseAddUpCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCourseAddUpCompleted(this, new GetCourseAddUpCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCourseAddUpAsync(string courseName, string rbo, string vender, string venderCode, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate) {
            this.GetCourseAddUpAsync(courseName, rbo, vender, venderCode, finishBeginDate, finishEndDate, studyBeginDate, studyEndDate, null);
        }
        
        public void GetCourseAddUpAsync(string courseName, string rbo, string vender, string venderCode, string finishBeginDate, string finishEndDate, string studyBeginDate, string studyEndDate, object userState) {
            if ((this.onBeginGetCourseAddUpDelegate == null)) {
                this.onBeginGetCourseAddUpDelegate = new BeginOperationDelegate(this.OnBeginGetCourseAddUp);
            }
            if ((this.onEndGetCourseAddUpDelegate == null)) {
                this.onEndGetCourseAddUpDelegate = new EndOperationDelegate(this.OnEndGetCourseAddUp);
            }
            if ((this.onGetCourseAddUpCompletedDelegate == null)) {
                this.onGetCourseAddUpCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCourseAddUpCompleted);
            }
            base.InvokeAsync(this.onBeginGetCourseAddUpDelegate, new object[] {
                        courseName,
                        rbo,
                        vender,
                        venderCode,
                        finishBeginDate,
                        finishEndDate,
                        studyBeginDate,
                        studyEndDate}, this.onEndGetCourseAddUpDelegate, this.onGetCourseAddUpCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetCourseTable(string courseName) {
            return base.Channel.GetCourseTable(courseName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCourseTable(string courseName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCourseTable(courseName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetCourseTable(System.IAsyncResult result) {
            return base.Channel.EndGetCourseTable(result);
        }
        
        private System.IAsyncResult OnBeginGetCourseTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string courseName = ((string)(inValues[0]));
            return this.BeginGetCourseTable(courseName, callback, asyncState);
        }
        
        private object[] OnEndGetCourseTable(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetCourseTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCourseTableCompleted(object state) {
            if ((this.GetCourseTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCourseTableCompleted(this, new GetCourseTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCourseTableAsync(string courseName) {
            this.GetCourseTableAsync(courseName, null);
        }
        
        public void GetCourseTableAsync(string courseName, object userState) {
            if ((this.onBeginGetCourseTableDelegate == null)) {
                this.onBeginGetCourseTableDelegate = new BeginOperationDelegate(this.OnBeginGetCourseTable);
            }
            if ((this.onEndGetCourseTableDelegate == null)) {
                this.onEndGetCourseTableDelegate = new EndOperationDelegate(this.OnEndGetCourseTable);
            }
            if ((this.onGetCourseTableCompletedDelegate == null)) {
                this.onGetCourseTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCourseTableCompleted);
            }
            base.InvokeAsync(this.onBeginGetCourseTableDelegate, new object[] {
                        courseName}, this.onEndGetCourseTableDelegate, this.onGetCourseTableCompletedDelegate, userState);
        }
        
        public string[] GetCourseName() {
            return base.Channel.GetCourseName();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCourseName(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCourseName(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetCourseName(System.IAsyncResult result) {
            return base.Channel.EndGetCourseName(result);
        }
        
        private System.IAsyncResult OnBeginGetCourseName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCourseName(callback, asyncState);
        }
        
        private object[] OnEndGetCourseName(System.IAsyncResult result) {
            string[] retVal = this.EndGetCourseName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCourseNameCompleted(object state) {
            if ((this.GetCourseNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCourseNameCompleted(this, new GetCourseNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCourseNameAsync() {
            this.GetCourseNameAsync(null);
        }
        
        public void GetCourseNameAsync(object userState) {
            if ((this.onBeginGetCourseNameDelegate == null)) {
                this.onBeginGetCourseNameDelegate = new BeginOperationDelegate(this.OnBeginGetCourseName);
            }
            if ((this.onEndGetCourseNameDelegate == null)) {
                this.onEndGetCourseNameDelegate = new EndOperationDelegate(this.OnEndGetCourseName);
            }
            if ((this.onGetCourseNameCompletedDelegate == null)) {
                this.onGetCourseNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCourseNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetCourseNameDelegate, null, this.onEndGetCourseNameDelegate, this.onGetCourseNameCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetMaxScoreTrainning(string vender, string courseName, string recordName) {
            return base.Channel.GetMaxScoreTrainning(vender, courseName, recordName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxScoreTrainning(string vender, string courseName, string recordName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxScoreTrainning(vender, courseName, recordName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetMaxScoreTrainning(System.IAsyncResult result) {
            return base.Channel.EndGetMaxScoreTrainning(result);
        }
        
        private System.IAsyncResult OnBeginGetMaxScoreTrainning(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string vender = ((string)(inValues[0]));
            string courseName = ((string)(inValues[1]));
            string recordName = ((string)(inValues[2]));
            return this.BeginGetMaxScoreTrainning(vender, courseName, recordName, callback, asyncState);
        }
        
        private object[] OnEndGetMaxScoreTrainning(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetMaxScoreTrainning(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMaxScoreTrainningCompleted(object state) {
            if ((this.GetMaxScoreTrainningCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxScoreTrainningCompleted(this, new GetMaxScoreTrainningCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxScoreTrainningAsync(string vender, string courseName, string recordName) {
            this.GetMaxScoreTrainningAsync(vender, courseName, recordName, null);
        }
        
        public void GetMaxScoreTrainningAsync(string vender, string courseName, string recordName, object userState) {
            if ((this.onBeginGetMaxScoreTrainningDelegate == null)) {
                this.onBeginGetMaxScoreTrainningDelegate = new BeginOperationDelegate(this.OnBeginGetMaxScoreTrainning);
            }
            if ((this.onEndGetMaxScoreTrainningDelegate == null)) {
                this.onEndGetMaxScoreTrainningDelegate = new EndOperationDelegate(this.OnEndGetMaxScoreTrainning);
            }
            if ((this.onGetMaxScoreTrainningCompletedDelegate == null)) {
                this.onGetMaxScoreTrainningCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxScoreTrainningCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxScoreTrainningDelegate, new object[] {
                        vender,
                        courseName,
                        recordName}, this.onEndGetMaxScoreTrainningDelegate, this.onGetMaxScoreTrainningCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetTrainningRecord(string[] sysIdList, string rbo, string venderName, string venderId, string userName, string userAccount, string courseName, string beginDate, string endDate) {
            return base.Channel.GetTrainningRecord(sysIdList, rbo, venderName, venderId, userName, userAccount, courseName, beginDate, endDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrainningRecord(string[] sysIdList, string rbo, string venderName, string venderId, string userName, string userAccount, string courseName, string beginDate, string endDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrainningRecord(sysIdList, rbo, venderName, venderId, userName, userAccount, courseName, beginDate, endDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetTrainningRecord(System.IAsyncResult result) {
            return base.Channel.EndGetTrainningRecord(result);
        }
        
        private System.IAsyncResult OnBeginGetTrainningRecord(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] sysIdList = ((string[])(inValues[0]));
            string rbo = ((string)(inValues[1]));
            string venderName = ((string)(inValues[2]));
            string venderId = ((string)(inValues[3]));
            string userName = ((string)(inValues[4]));
            string userAccount = ((string)(inValues[5]));
            string courseName = ((string)(inValues[6]));
            string beginDate = ((string)(inValues[7]));
            string endDate = ((string)(inValues[8]));
            return this.BeginGetTrainningRecord(sysIdList, rbo, venderName, venderId, userName, userAccount, courseName, beginDate, endDate, callback, asyncState);
        }
        
        private object[] OnEndGetTrainningRecord(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetTrainningRecord(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrainningRecordCompleted(object state) {
            if ((this.GetTrainningRecordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrainningRecordCompleted(this, new GetTrainningRecordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrainningRecordAsync(string[] sysIdList, string rbo, string venderName, string venderId, string userName, string userAccount, string courseName, string beginDate, string endDate) {
            this.GetTrainningRecordAsync(sysIdList, rbo, venderName, venderId, userName, userAccount, courseName, beginDate, endDate, null);
        }
        
        public void GetTrainningRecordAsync(string[] sysIdList, string rbo, string venderName, string venderId, string userName, string userAccount, string courseName, string beginDate, string endDate, object userState) {
            if ((this.onBeginGetTrainningRecordDelegate == null)) {
                this.onBeginGetTrainningRecordDelegate = new BeginOperationDelegate(this.OnBeginGetTrainningRecord);
            }
            if ((this.onEndGetTrainningRecordDelegate == null)) {
                this.onEndGetTrainningRecordDelegate = new EndOperationDelegate(this.OnEndGetTrainningRecord);
            }
            if ((this.onGetTrainningRecordCompletedDelegate == null)) {
                this.onGetTrainningRecordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrainningRecordCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrainningRecordDelegate, new object[] {
                        sysIdList,
                        rbo,
                        venderName,
                        venderId,
                        userName,
                        userAccount,
                        courseName,
                        beginDate,
                        endDate}, this.onEndGetTrainningRecordDelegate, this.onGetTrainningRecordCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetTrainningBaseInfo(string courseName, string recordName) {
            return base.Channel.GetTrainningBaseInfo(courseName, recordName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrainningBaseInfo(string courseName, string recordName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrainningBaseInfo(courseName, recordName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetTrainningBaseInfo(System.IAsyncResult result) {
            return base.Channel.EndGetTrainningBaseInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetTrainningBaseInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string courseName = ((string)(inValues[0]));
            string recordName = ((string)(inValues[1]));
            return this.BeginGetTrainningBaseInfo(courseName, recordName, callback, asyncState);
        }
        
        private object[] OnEndGetTrainningBaseInfo(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetTrainningBaseInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrainningBaseInfoCompleted(object state) {
            if ((this.GetTrainningBaseInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrainningBaseInfoCompleted(this, new GetTrainningBaseInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrainningBaseInfoAsync(string courseName, string recordName) {
            this.GetTrainningBaseInfoAsync(courseName, recordName, null);
        }
        
        public void GetTrainningBaseInfoAsync(string courseName, string recordName, object userState) {
            if ((this.onBeginGetTrainningBaseInfoDelegate == null)) {
                this.onBeginGetTrainningBaseInfoDelegate = new BeginOperationDelegate(this.OnBeginGetTrainningBaseInfo);
            }
            if ((this.onEndGetTrainningBaseInfoDelegate == null)) {
                this.onEndGetTrainningBaseInfoDelegate = new EndOperationDelegate(this.OnEndGetTrainningBaseInfo);
            }
            if ((this.onGetTrainningBaseInfoCompletedDelegate == null)) {
                this.onGetTrainningBaseInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrainningBaseInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrainningBaseInfoDelegate, new object[] {
                        courseName,
                        recordName}, this.onEndGetTrainningBaseInfoDelegate, this.onGetTrainningBaseInfoCompletedDelegate, userState);
        }
        
        public string[] GetDistinctRecoordName(string courseName) {
            return base.Channel.GetDistinctRecoordName(courseName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDistinctRecoordName(string courseName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDistinctRecoordName(courseName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetDistinctRecoordName(System.IAsyncResult result) {
            return base.Channel.EndGetDistinctRecoordName(result);
        }
        
        private System.IAsyncResult OnBeginGetDistinctRecoordName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string courseName = ((string)(inValues[0]));
            return this.BeginGetDistinctRecoordName(courseName, callback, asyncState);
        }
        
        private object[] OnEndGetDistinctRecoordName(System.IAsyncResult result) {
            string[] retVal = this.EndGetDistinctRecoordName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDistinctRecoordNameCompleted(object state) {
            if ((this.GetDistinctRecoordNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDistinctRecoordNameCompleted(this, new GetDistinctRecoordNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDistinctRecoordNameAsync(string courseName) {
            this.GetDistinctRecoordNameAsync(courseName, null);
        }
        
        public void GetDistinctRecoordNameAsync(string courseName, object userState) {
            if ((this.onBeginGetDistinctRecoordNameDelegate == null)) {
                this.onBeginGetDistinctRecoordNameDelegate = new BeginOperationDelegate(this.OnBeginGetDistinctRecoordName);
            }
            if ((this.onEndGetDistinctRecoordNameDelegate == null)) {
                this.onEndGetDistinctRecoordNameDelegate = new EndOperationDelegate(this.OnEndGetDistinctRecoordName);
            }
            if ((this.onGetDistinctRecoordNameCompletedDelegate == null)) {
                this.onGetDistinctRecoordNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDistinctRecoordNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetDistinctRecoordNameDelegate, new object[] {
                        courseName}, this.onEndGetDistinctRecoordNameDelegate, this.onGetDistinctRecoordNameCompletedDelegate, userState);
        }
        
        public string GetTime() {
            return base.Channel.GetTime();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetTime(System.IAsyncResult result) {
            return base.Channel.EndGetTime(result);
        }
        
        private System.IAsyncResult OnBeginGetTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetTime(callback, asyncState);
        }
        
        private object[] OnEndGetTime(System.IAsyncResult result) {
            string retVal = this.EndGetTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeCompleted(object state) {
            if ((this.GetTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeCompleted(this, new GetTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeAsync() {
            this.GetTimeAsync(null);
        }
        
        public void GetTimeAsync(object userState) {
            if ((this.onBeginGetTimeDelegate == null)) {
                this.onBeginGetTimeDelegate = new BeginOperationDelegate(this.OnBeginGetTime);
            }
            if ((this.onEndGetTimeDelegate == null)) {
                this.onEndGetTimeDelegate = new EndOperationDelegate(this.OnEndGetTime);
            }
            if ((this.onGetTimeCompletedDelegate == null)) {
                this.onGetTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeDelegate, null, this.onEndGetTimeDelegate, this.onGetTimeCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetTestCount(string courseName, string rbo, string vender, string userName, string userAccount) {
            return base.Channel.GetTestCount(courseName, rbo, vender, userName, userAccount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTestCount(string courseName, string rbo, string vender, string userName, string userAccount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestCount(courseName, rbo, vender, userName, userAccount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetTestCount(System.IAsyncResult result) {
            return base.Channel.EndGetTestCount(result);
        }
        
        private System.IAsyncResult OnBeginGetTestCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string courseName = ((string)(inValues[0]));
            string rbo = ((string)(inValues[1]));
            string vender = ((string)(inValues[2]));
            string userName = ((string)(inValues[3]));
            string userAccount = ((string)(inValues[4]));
            return this.BeginGetTestCount(courseName, rbo, vender, userName, userAccount, callback, asyncState);
        }
        
        private object[] OnEndGetTestCount(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetTestCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestCountCompleted(object state) {
            if ((this.GetTestCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestCountCompleted(this, new GetTestCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestCountAsync(string courseName, string rbo, string vender, string userName, string userAccount) {
            this.GetTestCountAsync(courseName, rbo, vender, userName, userAccount, null);
        }
        
        public void GetTestCountAsync(string courseName, string rbo, string vender, string userName, string userAccount, object userState) {
            if ((this.onBeginGetTestCountDelegate == null)) {
                this.onBeginGetTestCountDelegate = new BeginOperationDelegate(this.OnBeginGetTestCount);
            }
            if ((this.onEndGetTestCountDelegate == null)) {
                this.onEndGetTestCountDelegate = new EndOperationDelegate(this.OnEndGetTestCount);
            }
            if ((this.onGetTestCountCompletedDelegate == null)) {
                this.onGetTestCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestCountDelegate, new object[] {
                        courseName,
                        rbo,
                        vender,
                        userName,
                        userAccount}, this.onEndGetTestCountDelegate, this.onGetTestCountCompletedDelegate, userState);
        }
        
        public bool InsertNewUser(string userId, string userName, string userAccount, string vender, string userPwd, string status) {
            return base.Channel.InsertNewUser(userId, userName, userAccount, vender, userPwd, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertNewUser(string userId, string userName, string userAccount, string vender, string userPwd, string status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertNewUser(userId, userName, userAccount, vender, userPwd, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInsertNewUser(System.IAsyncResult result) {
            return base.Channel.EndInsertNewUser(result);
        }
        
        private System.IAsyncResult OnBeginInsertNewUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            string userAccount = ((string)(inValues[2]));
            string vender = ((string)(inValues[3]));
            string userPwd = ((string)(inValues[4]));
            string status = ((string)(inValues[5]));
            return this.BeginInsertNewUser(userId, userName, userAccount, vender, userPwd, status, callback, asyncState);
        }
        
        private object[] OnEndInsertNewUser(System.IAsyncResult result) {
            bool retVal = this.EndInsertNewUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertNewUserCompleted(object state) {
            if ((this.InsertNewUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertNewUserCompleted(this, new InsertNewUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertNewUserAsync(string userId, string userName, string userAccount, string vender, string userPwd, string status) {
            this.InsertNewUserAsync(userId, userName, userAccount, vender, userPwd, status, null);
        }
        
        public void InsertNewUserAsync(string userId, string userName, string userAccount, string vender, string userPwd, string status, object userState) {
            if ((this.onBeginInsertNewUserDelegate == null)) {
                this.onBeginInsertNewUserDelegate = new BeginOperationDelegate(this.OnBeginInsertNewUser);
            }
            if ((this.onEndInsertNewUserDelegate == null)) {
                this.onEndInsertNewUserDelegate = new EndOperationDelegate(this.OnEndInsertNewUser);
            }
            if ((this.onInsertNewUserCompletedDelegate == null)) {
                this.onInsertNewUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertNewUserCompleted);
            }
            base.InvokeAsync(this.onBeginInsertNewUserDelegate, new object[] {
                        userId,
                        userName,
                        userAccount,
                        vender,
                        userPwd,
                        status}, this.onEndInsertNewUserDelegate, this.onInsertNewUserCompletedDelegate, userState);
        }
        
        public bool UpdateUserInfo(string userId, string userName, string userAccount, string vender, string userPwd, string userType, string status) {
            return base.Channel.UpdateUserInfo(userId, userName, userAccount, vender, userPwd, userType, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserInfo(string userId, string userName, string userAccount, string vender, string userPwd, string userType, string status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserInfo(userId, userName, userAccount, vender, userPwd, userType, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateUserInfo(System.IAsyncResult result) {
            return base.Channel.EndUpdateUserInfo(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            string userAccount = ((string)(inValues[2]));
            string vender = ((string)(inValues[3]));
            string userPwd = ((string)(inValues[4]));
            string userType = ((string)(inValues[5]));
            string status = ((string)(inValues[6]));
            return this.BeginUpdateUserInfo(userId, userName, userAccount, vender, userPwd, userType, status, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserInfo(System.IAsyncResult result) {
            bool retVal = this.EndUpdateUserInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserInfoCompleted(object state) {
            if ((this.UpdateUserInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserInfoCompleted(this, new UpdateUserInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserInfoAsync(string userId, string userName, string userAccount, string vender, string userPwd, string userType, string status) {
            this.UpdateUserInfoAsync(userId, userName, userAccount, vender, userPwd, userType, status, null);
        }
        
        public void UpdateUserInfoAsync(string userId, string userName, string userAccount, string vender, string userPwd, string userType, string status, object userState) {
            if ((this.onBeginUpdateUserInfoDelegate == null)) {
                this.onBeginUpdateUserInfoDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserInfo);
            }
            if ((this.onEndUpdateUserInfoDelegate == null)) {
                this.onEndUpdateUserInfoDelegate = new EndOperationDelegate(this.OnEndUpdateUserInfo);
            }
            if ((this.onUpdateUserInfoCompletedDelegate == null)) {
                this.onUpdateUserInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserInfoCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserInfoDelegate, new object[] {
                        userId,
                        userName,
                        userAccount,
                        vender,
                        userPwd,
                        userType,
                        status}, this.onEndUpdateUserInfoDelegate, this.onUpdateUserInfoCompletedDelegate, userState);
        }
        
        public bool InsertNewOrg(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status) {
            return base.Channel.InsertNewOrg(venderId, venderName, venderType, venderLocation, connectUserName, connectUserPhone, venderEmail, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertNewOrg(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertNewOrg(venderId, venderName, venderType, venderLocation, connectUserName, connectUserPhone, venderEmail, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInsertNewOrg(System.IAsyncResult result) {
            return base.Channel.EndInsertNewOrg(result);
        }
        
        private System.IAsyncResult OnBeginInsertNewOrg(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string venderId = ((string)(inValues[0]));
            string venderName = ((string)(inValues[1]));
            string venderType = ((string)(inValues[2]));
            string venderLocation = ((string)(inValues[3]));
            string connectUserName = ((string)(inValues[4]));
            string connectUserPhone = ((string)(inValues[5]));
            string venderEmail = ((string)(inValues[6]));
            string status = ((string)(inValues[7]));
            return this.BeginInsertNewOrg(venderId, venderName, venderType, venderLocation, connectUserName, connectUserPhone, venderEmail, status, callback, asyncState);
        }
        
        private object[] OnEndInsertNewOrg(System.IAsyncResult result) {
            bool retVal = this.EndInsertNewOrg(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertNewOrgCompleted(object state) {
            if ((this.InsertNewOrgCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertNewOrgCompleted(this, new InsertNewOrgCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertNewOrgAsync(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status) {
            this.InsertNewOrgAsync(venderId, venderName, venderType, venderLocation, connectUserName, connectUserPhone, venderEmail, status, null);
        }
        
        public void InsertNewOrgAsync(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status, object userState) {
            if ((this.onBeginInsertNewOrgDelegate == null)) {
                this.onBeginInsertNewOrgDelegate = new BeginOperationDelegate(this.OnBeginInsertNewOrg);
            }
            if ((this.onEndInsertNewOrgDelegate == null)) {
                this.onEndInsertNewOrgDelegate = new EndOperationDelegate(this.OnEndInsertNewOrg);
            }
            if ((this.onInsertNewOrgCompletedDelegate == null)) {
                this.onInsertNewOrgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertNewOrgCompleted);
            }
            base.InvokeAsync(this.onBeginInsertNewOrgDelegate, new object[] {
                        venderId,
                        venderName,
                        venderType,
                        venderLocation,
                        connectUserName,
                        connectUserPhone,
                        venderEmail,
                        status}, this.onEndInsertNewOrgDelegate, this.onInsertNewOrgCompletedDelegate, userState);
        }
        
        public bool UpdateOrgInfo(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status) {
            return base.Channel.UpdateOrgInfo(venderId, venderName, venderType, venderLocation, connectUserName, connectUserPhone, venderEmail, status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateOrgInfo(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateOrgInfo(venderId, venderName, venderType, venderLocation, connectUserName, connectUserPhone, venderEmail, status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateOrgInfo(System.IAsyncResult result) {
            return base.Channel.EndUpdateOrgInfo(result);
        }
        
        private System.IAsyncResult OnBeginUpdateOrgInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string venderId = ((string)(inValues[0]));
            string venderName = ((string)(inValues[1]));
            string venderType = ((string)(inValues[2]));
            string venderLocation = ((string)(inValues[3]));
            string connectUserName = ((string)(inValues[4]));
            string connectUserPhone = ((string)(inValues[5]));
            string venderEmail = ((string)(inValues[6]));
            string status = ((string)(inValues[7]));
            return this.BeginUpdateOrgInfo(venderId, venderName, venderType, venderLocation, connectUserName, connectUserPhone, venderEmail, status, callback, asyncState);
        }
        
        private object[] OnEndUpdateOrgInfo(System.IAsyncResult result) {
            bool retVal = this.EndUpdateOrgInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateOrgInfoCompleted(object state) {
            if ((this.UpdateOrgInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateOrgInfoCompleted(this, new UpdateOrgInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateOrgInfoAsync(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status) {
            this.UpdateOrgInfoAsync(venderId, venderName, venderType, venderLocation, connectUserName, connectUserPhone, venderEmail, status, null);
        }
        
        public void UpdateOrgInfoAsync(string venderId, string venderName, string venderType, string venderLocation, string connectUserName, string connectUserPhone, string venderEmail, string status, object userState) {
            if ((this.onBeginUpdateOrgInfoDelegate == null)) {
                this.onBeginUpdateOrgInfoDelegate = new BeginOperationDelegate(this.OnBeginUpdateOrgInfo);
            }
            if ((this.onEndUpdateOrgInfoDelegate == null)) {
                this.onEndUpdateOrgInfoDelegate = new EndOperationDelegate(this.OnEndUpdateOrgInfo);
            }
            if ((this.onUpdateOrgInfoCompletedDelegate == null)) {
                this.onUpdateOrgInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateOrgInfoCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateOrgInfoDelegate, new object[] {
                        venderId,
                        venderName,
                        venderType,
                        venderLocation,
                        connectUserName,
                        connectUserPhone,
                        venderEmail,
                        status}, this.onEndUpdateOrgInfoDelegate, this.onUpdateOrgInfoCompletedDelegate, userState);
        }
        
        public bool InsertNewMap(string userId, string userAccount, string courseName, string vender) {
            return base.Channel.InsertNewMap(userId, userAccount, courseName, vender);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertNewMap(string userId, string userAccount, string courseName, string vender, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertNewMap(userId, userAccount, courseName, vender, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInsertNewMap(System.IAsyncResult result) {
            return base.Channel.EndInsertNewMap(result);
        }
        
        private System.IAsyncResult OnBeginInsertNewMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string userAccount = ((string)(inValues[1]));
            string courseName = ((string)(inValues[2]));
            string vender = ((string)(inValues[3]));
            return this.BeginInsertNewMap(userId, userAccount, courseName, vender, callback, asyncState);
        }
        
        private object[] OnEndInsertNewMap(System.IAsyncResult result) {
            bool retVal = this.EndInsertNewMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertNewMapCompleted(object state) {
            if ((this.InsertNewMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertNewMapCompleted(this, new InsertNewMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertNewMapAsync(string userId, string userAccount, string courseName, string vender) {
            this.InsertNewMapAsync(userId, userAccount, courseName, vender, null);
        }
        
        public void InsertNewMapAsync(string userId, string userAccount, string courseName, string vender, object userState) {
            if ((this.onBeginInsertNewMapDelegate == null)) {
                this.onBeginInsertNewMapDelegate = new BeginOperationDelegate(this.OnBeginInsertNewMap);
            }
            if ((this.onEndInsertNewMapDelegate == null)) {
                this.onEndInsertNewMapDelegate = new EndOperationDelegate(this.OnEndInsertNewMap);
            }
            if ((this.onInsertNewMapCompletedDelegate == null)) {
                this.onInsertNewMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertNewMapCompleted);
            }
            base.InvokeAsync(this.onBeginInsertNewMapDelegate, new object[] {
                        userId,
                        userAccount,
                        courseName,
                        vender}, this.onEndInsertNewMapDelegate, this.onInsertNewMapCompletedDelegate, userState);
        }
        
        public bool UpdateTestOrg(string[] venderCodes) {
            return base.Channel.UpdateTestOrg(venderCodes);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTestOrg(string[] venderCodes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTestOrg(venderCodes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateTestOrg(System.IAsyncResult result) {
            return base.Channel.EndUpdateTestOrg(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTestOrg(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] venderCodes = ((string[])(inValues[0]));
            return this.BeginUpdateTestOrg(venderCodes, callback, asyncState);
        }
        
        private object[] OnEndUpdateTestOrg(System.IAsyncResult result) {
            bool retVal = this.EndUpdateTestOrg(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTestOrgCompleted(object state) {
            if ((this.UpdateTestOrgCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTestOrgCompleted(this, new UpdateTestOrgCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTestOrgAsync(string[] venderCodes) {
            this.UpdateTestOrgAsync(venderCodes, null);
        }
        
        public void UpdateTestOrgAsync(string[] venderCodes, object userState) {
            if ((this.onBeginUpdateTestOrgDelegate == null)) {
                this.onBeginUpdateTestOrgDelegate = new BeginOperationDelegate(this.OnBeginUpdateTestOrg);
            }
            if ((this.onEndUpdateTestOrgDelegate == null)) {
                this.onEndUpdateTestOrgDelegate = new EndOperationDelegate(this.OnEndUpdateTestOrg);
            }
            if ((this.onUpdateTestOrgCompletedDelegate == null)) {
                this.onUpdateTestOrgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTestOrgCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTestOrgDelegate, new object[] {
                        venderCodes}, this.onEndUpdateTestOrgDelegate, this.onUpdateTestOrgCompletedDelegate, userState);
        }
    }
}
